// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package shootoutpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShootoutServiceClient is the client API for ShootoutService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShootoutServiceClient interface {
	BeginShootout(ctx context.Context, in *BeginShootoutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type shootoutServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShootoutServiceClient(cc grpc.ClientConnInterface) ShootoutServiceClient {
	return &shootoutServiceClient{cc}
}

func (c *shootoutServiceClient) BeginShootout(ctx context.Context, in *BeginShootoutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/shootoutpb.ShootoutService/BeginShootout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShootoutServiceServer is the server API for ShootoutService service.
// All implementations must embed UnimplementedShootoutServiceServer
// for forward compatibility
type ShootoutServiceServer interface {
	BeginShootout(context.Context, *BeginShootoutRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedShootoutServiceServer()
}

// UnimplementedShootoutServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShootoutServiceServer struct {
}

func (UnimplementedShootoutServiceServer) BeginShootout(context.Context, *BeginShootoutRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginShootout not implemented")
}
func (UnimplementedShootoutServiceServer) mustEmbedUnimplementedShootoutServiceServer() {}

// UnsafeShootoutServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShootoutServiceServer will
// result in compilation errors.
type UnsafeShootoutServiceServer interface {
	mustEmbedUnimplementedShootoutServiceServer()
}

func RegisterShootoutServiceServer(s grpc.ServiceRegistrar, srv ShootoutServiceServer) {
	s.RegisterService(&ShootoutService_ServiceDesc, srv)
}

func _ShootoutService_BeginShootout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginShootoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShootoutServiceServer).BeginShootout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shootoutpb.ShootoutService/BeginShootout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShootoutServiceServer).BeginShootout(ctx, req.(*BeginShootoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShootoutService_ServiceDesc is the grpc.ServiceDesc for ShootoutService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShootoutService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shootoutpb.ShootoutService",
	HandlerType: (*ShootoutServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BeginShootout",
			Handler:    _ShootoutService_BeginShootout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/shootout/shootout.proto",
}
