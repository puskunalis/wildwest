// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package damagepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DamageServiceClient is the client API for DamageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DamageServiceClient interface {
	ApplyDamage(ctx context.Context, in *DamageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type damageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDamageServiceClient(cc grpc.ClientConnInterface) DamageServiceClient {
	return &damageServiceClient{cc}
}

func (c *damageServiceClient) ApplyDamage(ctx context.Context, in *DamageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/damagepb.DamageService/ApplyDamage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DamageServiceServer is the server API for DamageService service.
// All implementations must embed UnimplementedDamageServiceServer
// for forward compatibility
type DamageServiceServer interface {
	ApplyDamage(context.Context, *DamageRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDamageServiceServer()
}

// UnimplementedDamageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDamageServiceServer struct {
}

func (UnimplementedDamageServiceServer) ApplyDamage(context.Context, *DamageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyDamage not implemented")
}
func (UnimplementedDamageServiceServer) mustEmbedUnimplementedDamageServiceServer() {}

// UnsafeDamageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DamageServiceServer will
// result in compilation errors.
type UnsafeDamageServiceServer interface {
	mustEmbedUnimplementedDamageServiceServer()
}

func RegisterDamageServiceServer(s grpc.ServiceRegistrar, srv DamageServiceServer) {
	s.RegisterService(&DamageService_ServiceDesc, srv)
}

func _DamageService_ApplyDamage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DamageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DamageServiceServer).ApplyDamage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/damagepb.DamageService/ApplyDamage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DamageServiceServer).ApplyDamage(ctx, req.(*DamageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DamageService_ServiceDesc is the grpc.ServiceDesc for DamageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DamageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "damagepb.DamageService",
	HandlerType: (*DamageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyDamage",
			Handler:    _DamageService_ApplyDamage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/damage/damage.proto",
}
